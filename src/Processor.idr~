module Processor

evaluator : Memory -> Memory
evaluator mem = case getInstruction (pc $ regs mem) mem of
  ADD r r' r'' => evaluator $ incPC $ (updtRD r ((toRD r' mem) + (toRD r'' mem)) mem)
  -- SHA3    : Register -> Register -> ISA
  ADDRESS r => evaluator $ incPC mem -- todo
  LOAD r r' => evaluator $ incPC mem -- todo
  JUMPI r i => evaluator $ updtRD PC ((if (toRD r mem) == 0 then 1 else i) + toRD PC mem) mem
  EQUAL r r' r'' => evaluator $ incPC $ updtRD r (if (toRD r' mem) == (toRD r'' mem) then 1 else 0) mem
  NOT r r' => evaluator $ incPC $ updtRD r (if (toRD r' mem) == 0 then 1 else 0) mem
  STOP => mem -- todo
  DATA i => mem -- todo



incPC : Memory -> Memory
incPC m = updtRD PC (1 + toRD PC m) m

getInstruction : Int -> Memory -> ISA
getInstruction 0 (MkMemory regs' (ASM instr asm')) = instr
getInstruction i (MkMemory regs' (ASM instr asm')) 
  = getInstruction (i - 1) (MkMemory regs' asm')
getInstruction _ _ = STOP  
